import { NextResponse, type NextRequest } from 'next/server';
import admin from 'firebase-admin';
import crypto from 'crypto';

// --- ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Admin SDK (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô) ---
if (!admin.apps.length) {
  try {
    const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT!);
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
  } catch (e: unknown) { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó unknown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö catch error
    console.error("Firebase Admin initialization error", e);
  }
}
const db = admin.firestore();
// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ---

// === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏£‡∏Å) ===
const STORE_ID = 'laundry_1';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quick Reply Item ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á TypeScript
interface QuickReplyAction {
  type: 'message';
  label: string;
  text: string;
}

interface QuickReplyItem {
  type: 'action';
  action: QuickReplyAction;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° Quick Reply
async function replyMessage(replyToken: string, text: string, quickReplyItems?: QuickReplyItem[]) {
  const replyUrl = 'https://api.line.me/v2/bot/message/reply';
  const accessToken = process.env.LINE_MESSAGING_TOKEN!;

  const messagePayload: {
    replyToken: string;
    messages: Array<{
      type: 'text';
      text: string;
      quickReply?: { items: QuickReplyItem[] };
    }>;
  } = {
    replyToken: replyToken,
    messages: [{ type: 'text', text: text }],
  };

  if (quickReplyItems && quickReplyItems.length > 0) {
    messagePayload.messages[0].quickReply = { items: quickReplyItems };
  }

  const response = await fetch(replyUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${accessToken}`,
    },
    body: JSON.stringify(messagePayload),
  });
  if (!response.ok) {
    console.error("Failed to send reply message:", await response.json());
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
async function startTimer(userId: string, storeId: string, machineType: 'washer' | 'dryer', machineId: number, duration: number, displayName: string, replyToken: string) {
    const endTime = new Date(Date.now() + duration * 60 * 1000);

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ===
    const existingTimersQuery = await db.collection('stores').doc(storeId).collection('timers')
        .where('machine_id', '==', machineId)
        .where('machine_type', '==', machineType)
        .where('status', '==', 'pending')
        .get();

    if (!existingTimersQuery.empty) {
        await replyMessage(replyToken, `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ üôè\n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ${displayName} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞`);
        return;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore (timers sub-collection ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ Store ID)
    await db.collection('stores').doc(storeId).collection('timers').add({
        user_id: userId,
        machine_id: machineId,
        machine_type: machineType,
        display_name: displayName,
        duration_minutes: duration,
        end_time: admin.firestore.Timestamp.fromDate(endTime),
        status: 'pending',
        created_at: admin.firestore.FieldValue.serverTimestamp(),
    });

    await replyMessage(replyToken, `‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏∞! ‚úÖ\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ ${duration} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${displayName} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`);
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.text();
    const signature = request.headers.get('x-line-signature') || '';
    const channelSecret = process.env.LINE_MESSAGING_CHANNEL_SECRET!;

    if (!channelSecret) {
      throw new Error("LINE_MESSAGING_CHANNEL_SECRET is not set in environment variables.");
    }

    const hash = crypto.createHmac('sha256', channelSecret).update(body).digest('base64');
    if (hash !== signature) {
      return new NextResponse("Signature validation failed!", { status: 401 });
    }

    const events = JSON.parse(body).events;
    for (const event of events) {
      if (event.type === 'message' && event.message.type === 'text' && event.source.userId) {
        const userId = event.source.userId;
        const userMessage = event.message.text.trim().toLowerCase();
        const replyToken = event.replyToken;

        // --- DEBUG LOG START ---
        console.log("--- WEBHOOK DEBUG LOG ---");
        console.log("Received message:", userMessage);
        console.log("Using STORE_ID:", STORE_ID);
        // --- DEBUG LOG END ---

        // === LOGIC ‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ===
        // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤/‡∏≠‡∏ö‡∏ú‡πâ‡∏≤)
        if (userMessage === "‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤") {
            const machineConfigsCol = db.collection('stores').doc(STORE_ID).collection('machine_configs');
            const q = machineConfigsCol.where('machine_type', '==', 'washer').where('is_active', '==', true);
            const machineSnapshot = await q.get();

            const washerButtons: QuickReplyItem[] = machineSnapshot.docs.map(doc => {
                const data = doc.data();
                return {
                    type: 'action',
                    action: { type: 'message', label: `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ${data.machine_id}`, text: `‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_${data.machine_id}` }
                };
            });

            if (washerButtons.length > 0) {
                await replyMessage(replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤‡∏Ñ‡πà‡∏∞', washerButtons);
            } else {
                await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á');
            }

        } else if (userMessage === "‡∏≠‡∏ö‡∏ú‡πâ‡∏≤") {
            const machineConfigsCol = db.collection('stores').doc(STORE_ID).collection('machine_configs');
            const q = machineConfigsCol.where('machine_type', '==', 'dryer').where('is_active', '==', true);
            const machineSnapshot = await q.get();

            const dryerButtons: QuickReplyItem[] = machineSnapshot.docs.map(doc => {
                const data = doc.data();
                return {
                    type: 'action',
                    action: { type: 'message', label: `${data.duration_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`, text: `‡∏≠‡∏ö‡∏ú‡πâ‡∏≤_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_${data.machine_id}` }
                };
            });

            if (dryerButtons.length > 0) {
                await replyMessage(replyToken, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏ö‡∏ú‡πâ‡∏≤‡∏Ñ‡πà‡∏∞', dryerButtons);
            } else {
                await replyMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏ö‡∏ú‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á');
            }
        }
        // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        else if (userMessage.startsWith("‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_")) {
            const requestedMachineId = parseInt(userMessage.replace('‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_', ''), 10);
            if (!isNaN(requestedMachineId)) {
                const machineConfigsCol = db.collection('stores').doc(STORE_ID).collection('machine_configs');
                const q = machineConfigsCol.where('machine_id', '==', requestedMachineId).where('machine_type', '==', 'washer').limit(1);
                const machineSnapshot = await q.get();

                if (!machineSnapshot.empty) {
                    const machineConfigData = machineSnapshot.docs[0].data();
                    if (machineConfigData.is_active) {
                        await startTimer(userId, STORE_ID, 'washer', machineConfigData.machine_id, machineConfigData.duration_minutes, machineConfigData.display_name, replyToken);
                    } else {
                        await replyMessage(replyToken, `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ üôè\n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ${machineConfigData.display_name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞`);
                    }
                } else {
                    await replyMessage(replyToken, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
                }
            } else {
                await replyMessage(replyToken, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            }
        } else if (userMessage.startsWith("‡∏≠‡∏ö‡∏ú‡πâ‡∏≤_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_")) {
            const requestedMachineId = parseInt(userMessage.replace('‡∏≠‡∏ö‡∏ú‡πâ‡∏≤_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_', ''), 10); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏ö‡∏ú‡πâ‡∏≤ machine_id ‡∏Ñ‡∏∑‡∏≠ duration (40, 50, 60)
            if (!isNaN(requestedMachineId)) {
                const machineConfigsCol = db.collection('stores').doc(STORE_ID).collection('machine_configs');
                const q = machineConfigsCol.where('machine_id', '==', requestedMachineId).where('machine_type', '==', 'dryer').limit(1);
                const machineSnapshot = await q.get();

                if (!machineSnapshot.empty) {
                    const machineConfigData = machineSnapshot.docs[0].data();
                    if (machineConfigData.is_active) {
                        await startTimer(userId, STORE_ID, 'dryer', machineConfigData.machine_id, machineConfigData.duration_minutes, machineConfigData.display_name, replyToken);
                    } else {
                         await replyMessage(replyToken, `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ üôè\n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ${machineConfigData.display_name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞`);
                    }
                } else {
                    await replyMessage(replyToken, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏ö‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
                }
            } else {
                await replyMessage(replyToken, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏ö‡∏ú‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            }
        }
        // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 0: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        else {
            const initialButtons: QuickReplyItem[] = [
                { type: 'action', action: { type: 'message', label: '‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤', text: '‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤' } },
                { type: 'action', action: { type: 'message', label: '‡∏≠‡∏ö‡∏ú‡πâ‡∏≤', text: '‡∏≠‡∏ö‡∏ú‡πâ‡∏≤' } }
            ];
            await replyMessage(replyToken, '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏£‡πâ‡∏≤‡∏ô‡∏ã‡∏±‡∏Å-‡∏≠‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö üôè\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞', initialButtons);
        }
      } else { // Handle non-text messages (e.g., sticker, image)
        if (event.replyToken) {
            await replyMessage(event.replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        }
      }
    }
    return NextResponse.json({ status: "ok" });
  } catch (error: unknown) { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó unknown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö catch error
    console.error("Error in webhook handler:", error);
    // In case of any unexpected error, try to reply a generic message
    const fallbackReplyToken = (request.body as { events?: { replyToken?: string }[] })?.events?.[0]?.replyToken;
    if (fallbackReplyToken) {
        await replyMessage(fallbackReplyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
    return new NextResponse("Internal Server Error", { status: 500 });
  }
}